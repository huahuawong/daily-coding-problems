#1 This question was asked by Google.

You are given an array of length n + 1 whose elements belong to the set
{1, 2, ..., n}. By the pigeonhole principle, there must be a duplicate. 

Find it in linear time and space.

pigeonhole principle - states that if items are put into containers, with, then at least one container 
must contain more than one item. 

# if we can modify the array
def detect_Dupli(nums):
       nums.sort()
       for i in range(1, len(nums)):
           if nums[i] == nums[i-1]:
               return nums[i]

# if it can't be modified

class Solution:
    def findDuplicate(self, nums):
        # Find the intersection point of the two runners.
        tortoise = nums[0]
        hare = nums[0]
        while True:
            tortoise = nums[tortoise]
            hare = nums[nums[hare]]
            if tortoise == hare:
                break
        
        # Find the "entrance" to the cycle.
        ptr1 = nums[0]
        ptr2 = tortoise
        while ptr1 != ptr2:
            ptr1 = nums[ptr1]
            ptr2 = nums[ptr2]
        
        return ptr1


#2 You are given an array of arrays of integers, where each array corresponds to a row in a triangle of numbers. 
For example, [[1], [2, 3], [1, 5, 1]] represents the triangle:

  1
 2 3
1 5 1

The weight of the path is the sum of the entries, which would be 1+3+5 = 9 in this case
